class Solution {
public:
    /* 
     * MORRIS TRAVERSAL
     * Inorder Traversal（should get ascending seq.）：Analysis:
     * case A: If 2 near nodes swapped，then there will be just 1 Inversion Pair.
     * case B: If 2 nodes not near swapped，then there will be 2 Inversion Pairs.
     * Whether case A or case B, the max-value and the min-value of the Inversion Pair(s) are
     * the values we are interested in. 
     */
    vector<int> recoverTree(TreeNode *root) {
        TreeNode *cur, *pre, *node1, *node2;  // node1, node2: Record 2 near nodes
        TreeNode *first, *second;  // At the end, first and second will be the 2 nodes to be swapped. 
        node1 = node2 = first = NULL;
        cur = root;
        while (cur) {
            if (cur->left == NULL) {
                if (node1 == NULL) node1 = cur;
                else if (node2 == NULL) node2 = cur;
                else { 
                    node1 = node2; 
                    node2 = cur;
                }
                cur = cur->right;
            } else {
                pre = cur->left;
                while (pre->right && pre->right != cur) pre = pre->right;
                if (pre->right == NULL) {
                    pre->right = cur;
                    cur = cur->left;
                    continue;
                } else {
                    pre->right = NULL;
                    if (node2 == NULL) node2 = cur;
                    else {
                        node1 = node2; 
                        node2 = cur;
                    }
                    cur = cur->right;
                }
            }
            if (node1 && node2 && node1->val > node2->val) {

                if (first == NULL)  first = node1;
                second = node2;
            }
        }
        /* Now lets return the answer */
        vector<int> ans;
        ans.push_back(min(first->val, second->val));
        ans.push_back(max(first->val, second->val));
        return ans;
    }
};
